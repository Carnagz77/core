
import java.io.Serializable;
import java.util.List;

import javax.ejb.Stateful;
import javax.ejb.TransactionAttribute;
import javax.enterprise.context.Conversation;
import javax.enterprise.context.ConversationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import @{entity.getQualifiedName()};

/**
 * Backing Bean for @{entity.getName()} entities.
 * <p>
 * This class provides CRUD functionality for all @{entity.getName()} entities.
 * It relies purely on Java EE standards (i.e. <tt>&#64;ConversationScoped</tt>
 * for state management, <tt>PersistenceContext</tt> for persistence,
 * <tt>CriteriaBuilder</tt> for queries) rather than depending on a CRUD
 * framework.
 */
 
@Named
@Stateful
@ConversationScoped
public class @{entity.getName()}Bean implements Serializable {

	private static final long serialVersionUID = 1L;

	//
	// Support retrieving individual @{entity.getName()}s
	//

	private Long id;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	private @{entity.getName()} @{ccEntity};

	@Inject
	private Conversation conversation;

	@ConversationScoped
	@PersistenceContext
	private EntityManager entityManager;

	public void retrieve() {

		if (conversation.isTransient()) {
			conversation.begin();
		}

		if (id == null) {
			@{ccEntity} = new @{entity.getName()}();
		} else {
			@{ccEntity} = entityManager.find(@{entity.getName()}.class, getId());
		}
	}
	
	public @{entity.getName()} get@{entity.getName()}() {
		return @{ccEntity};
	}

	public String cancel() {
		conversation.end();
		return "list?faces-redirect=true";
	}

	//
	// Support creating, saving and deleting @{entity.getName()}s
	//

	@TransactionAttribute
	public String create() {
		entityManager.persist(@{ccEntity});
		conversation.end();
		return "view?faces-redirect=true&id=" + @{ccEntity}.getId();
	}

	@TransactionAttribute
	public String update() {
		entityManager.merge(@{ccEntity});
		conversation.end();
		return "view?faces-redirect=true&id=" + @{ccEntity}.getId();
	}

	@TransactionAttribute
	public String delete() {
		entityManager.remove(entityManager.find(@{entity.getName()}.class, getId()));
		conversation.end();
		return "list?faces-redirect=true";
	}

	//
	// Support listing all @{entity.getName()}s
	//

	public List<@{entity.getName()}> get@{entity.getName()}s() {
		return entityManager.createQuery(create@{entity.getName()}sQuery()).getResultList();
	}

	private CriteriaQuery<@{entity.getName()}> create@{entity.getName()}sQuery() {
		
		CriteriaQuery<@{entity.getName()}> criteria = entityManager.getCriteriaBuilder()
				.createQuery(@{entity.getName()}.class);
		return criteria.select(criteria.from(@{entity.getName()}.class));
	}
	
	//
	// Support listing @{entity.getName()}s with pagination
	//

	private int page;
	private int count;
	private List<@{entity.getName()}> pageItems;

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}
	
	public int getPageSize() {
		return 10;
	}

	public void paginate() {

		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Number> countCriteria = builder.createQuery(Number.class);
		Root<@{entity.getName()}> root = countCriteria.from(@{entity.getName()}.class);
		countCriteria = countCriteria.select(builder.count(root));
		count = entityManager.createQuery(countCriteria).getSingleResult()
				.intValue();

		pageItems = entityManager.createQuery(create@{entity.getName()}sQuery())
				.setFirstResult(page * getPageSize())
				.setMaxResults(getPageSize()).getResultList();
	}

	public List<@{entity.getName()}> getPageItems() {
		return pageItems;
	}

	public int getCount() {
		return count;
	}
}