package org.jboss.forge.spec.javaee.rest;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

/**
 * A REST resource for the ${entity.getName()} entity.
 */
@Stateless
@Path("${resourcePath}")
public class ${entityTable}Resource extends BaseEntityResource<${entity.getName()},${idType}>
{
   @PersistenceContext(unitName="${persistenceUnitName}")
   private EntityManager em;

   /**
    * <p>
    * A method for creating a new ${entity.getName()}
    * </p>
    * 
    * @param entity The new ${entity.getName()} to be created
    * @return
    */
   @POST
   @Consumes("${contentType}")
   public Response create(${entity.getName()} entity)
   {
      em.persist(entity);
      return Response.created(UriBuilder.fromResource(${entityTable}Resource.class).path(String.valueOf(entity.${getIdStatement})).build()).build();
   }
   
   @Override
   public ${entity.getName()} findById(${idType} id)
   {
      TypedQuery<${entity.getName()}> findByIdQuery = em.createQuery("${selectExpression} ${idClause} ${orderClause}", ${entity.getName()}.class);
      findByIdQuery.setParameter("entityId", id);
      ${entity.getName()} entity;
      try {
         entity = findByIdQuery.getSingleResult();
      } catch (NoResultException nre) {
         entity = null;
      }
      return entity;
   }

}