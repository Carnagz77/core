package org.jboss.forge.container.modules.providers;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.jboss.modules.ModuleIdentifier;

public class RuntimeClasspathSpec extends BaseModuleSpecProvider
{
   public static final ModuleIdentifier ID = ModuleIdentifier.create("classpath");

   public static Set<String> paths = new HashSet<String>();

   static
   {
      ClassLoader loader = ClassLoader.getSystemClassLoader();
      URL[] urls = ((URLClassLoader) loader).getURLs();

      for (URL url : urls)
      {
         try
         {
            File file = new File(url.toURI());
            if (file.isDirectory())
            {
               paths.addAll(getPathsFrom(file.getAbsolutePath(), file));
            }
            else if (!file.isDirectory())
            {
               JarFile jar = new JarFile(file);
               Enumeration<JarEntry> entries = jar.entries();
               while (entries.hasMoreElements())
               {
                  JarEntry entry = entries.nextElement();
                  String name = entry.getName();
                  if (name.indexOf('/') != -1)
                     paths.add(name.substring(0, name.lastIndexOf('/')));
               }
            }
         }
         catch (IOException e)
         {
            System.out.println("Failed loading paths from: [" + url.toString() + "]. Attempting folder discovery");
         }
         catch (URISyntaxException e)
         {
            throw new RuntimeException(e);
         }
      }

      paths.add("META-INF");
      paths.add("META-INF/services");
      paths.add("__redirected");
      paths.add("ch/qos/cal10n");
      paths.add("ch/qos/cal10n/util");
      paths.add("ch/qos/cal10n/verifier");
      paths.add("com/google/common/annotations");
      paths.add("com/google/common/base");
      paths.add("com/google/common/base/internal");
      paths.add("com/google/common/cache");
      paths.add("com/google/common/collect");
      paths.add("com/google/common/eventbus");
      paths.add("com/google/common/hash");
      paths.add("com/google/common/io");
      paths.add("com/google/common/math");
      paths.add("com/google/common/net");
      paths.add("com/google/common/primitives");
      paths.add("com/google/common/util/concurrent");
      paths.add("java/awt");
      paths.add("java/awt/color");
      paths.add("java/awt/datatransfer");
      paths.add("java/awt/dnd");
      paths.add("java/awt/dnd/peer");
      paths.add("java/awt/event");
      paths.add("java/awt/font");
      paths.add("java/awt/geom");
      paths.add("java/awt/im");
      paths.add("java/awt/im/spi");
      paths.add("java/awt/image");
      paths.add("java/awt/image/renderable");
      paths.add("java/awt/peer");
      paths.add("java/awt/print");
      paths.add("java/beans");
      paths.add("java/beans/beancontext");
      paths.add("java/io");
      paths.add("java/lang");
      paths.add("java/lang/annotation");
      paths.add("java/lang/instrument");
      paths.add("java/lang/management");
      paths.add("java/lang/ref");
      paths.add("java/lang/reflect");
      paths.add("java/math");
      paths.add("java/net");
      paths.add("java/nio");
      paths.add("java/nio/channels");
      paths.add("java/nio/channels/spi");
      paths.add("java/nio/charset");
      paths.add("java/nio/charset/spi");
      paths.add("java/rmi");
      paths.add("java/rmi/activation");
      paths.add("java/rmi/dgc");
      paths.add("java/rmi/registry");
      paths.add("java/rmi/server");
      paths.add("java/security");
      paths.add("java/security/acl");
      paths.add("java/security/cert");
      paths.add("java/security/interfaces");
      paths.add("java/security/spec");
      paths.add("java/sql");
      paths.add("java/text");
      paths.add("java/text/spi");
      paths.add("java/util");
      paths.add("java/util/concurrent");
      paths.add("java/util/concurrent/atomic");
      paths.add("java/util/concurrent/locks");
      paths.add("java/util/jar");
      paths.add("java/util/logging");
      paths.add("java/util/prefs");
      paths.add("java/util/regex");
      paths.add("java/util/spi");
      paths.add("java/util/zip");
      paths.add("javax/accessibility");
      paths.add("javax/activation");
      paths.add("javax/activity");
      paths.add("javax/annotation");
      paths.add("javax/annotation/concurrent");
      paths.add("javax/annotation/meta");
      paths.add("javax/annotation/processing");
      paths.add("javax/annotation/security");
      paths.add("javax/crypto");
      paths.add("javax/crypto/interfaces");
      paths.add("javax/crypto/spec");
      paths.add("javax/decorator");
      paths.add("javax/el");
      paths.add("javax/enterprise/context");
      paths.add("javax/enterprise/context/spi");
      paths.add("javax/enterprise/event");
      paths.add("javax/enterprise/inject");
      paths.add("javax/enterprise/inject/spi");
      paths.add("javax/enterprise/util");
      paths.add("javax/imageio");
      paths.add("javax/imageio/event");
      paths.add("javax/imageio/metadata");
      paths.add("javax/imageio/plugins/bmp");
      paths.add("javax/imageio/plugins/jpeg");
      paths.add("javax/imageio/spi");
      paths.add("javax/imageio/stream");
      paths.add("javax/interceptor");
      paths.add("javax/jws");
      paths.add("javax/jws/soap");
      paths.add("javax/lang/model");
      paths.add("javax/lang/model/element");
      paths.add("javax/lang/model/type");
      paths.add("javax/lang/model/util");
      paths.add("javax/management");
      paths.add("javax/management/loading");
      paths.add("javax/management/modelmbean");
      paths.add("javax/management/monitor");
      paths.add("javax/management/openmbean");
      paths.add("javax/management/relation");
      paths.add("javax/management/remote");
      paths.add("javax/management/remote/rmi");
      paths.add("javax/management/timer");
      paths.add("javax/media/j3d");
      paths.add("javax/media/jai");
      paths.add("javax/media/jai/iterator");
      paths.add("javax/media/jai/operator");
      paths.add("javax/media/jai/registry");
      paths.add("javax/media/jai/remote");
      paths.add("javax/media/jai/tilecodec");
      paths.add("javax/media/jai/util");
      paths.add("javax/media/jai/widget");
      paths.add("javax/naming");
      paths.add("javax/naming/directory");
      paths.add("javax/naming/event");
      paths.add("javax/naming/ldap");
      paths.add("javax/naming/spi");
      paths.add("javax/net");
      paths.add("javax/net/ssl");
      paths.add("javax/print");
      paths.add("javax/print/attribute");
      paths.add("javax/print/attribute/standard");
      paths.add("javax/print/event");
      paths.add("javax/rmi");
      paths.add("javax/rmi/CORBA");
      paths.add("javax/rmi/ssl");
      paths.add("javax/script");
      paths.add("javax/security/auth");
      paths.add("javax/security/auth/callback");
      paths.add("javax/security/auth/kerberos");
      paths.add("javax/security/auth/login");
      paths.add("javax/security/auth/spi");
      paths.add("javax/security/auth/x500");
      paths.add("javax/security/cert");
      paths.add("javax/security/sasl");
      paths.add("javax/servlet");
      paths.add("javax/servlet/annotation");
      paths.add("javax/servlet/descriptor");
      paths.add("javax/servlet/http");
      paths.add("javax/smartcardio");
      paths.add("javax/sound/midi");
      paths.add("javax/sound/midi/spi");
      paths.add("javax/sound/sampled");
      paths.add("javax/sound/sampled/spi");
      paths.add("javax/sql");
      paths.add("javax/sql/rowset");
      paths.add("javax/sql/rowset/serial");
      paths.add("javax/sql/rowset/spi");
      paths.add("javax/swing");
      paths.add("javax/swing/border");
      paths.add("javax/swing/colorchooser");
      paths.add("javax/swing/event");
      paths.add("javax/swing/filechooser");
      paths.add("javax/swing/plaf");
      paths.add("javax/swing/plaf/basic");
      paths.add("javax/swing/plaf/metal");
      paths.add("javax/swing/plaf/multi");
      paths.add("javax/swing/plaf/synth");
      paths.add("javax/swing/table");
      paths.add("javax/swing/text");
      paths.add("javax/swing/text/html");
      paths.add("javax/swing/text/html/parser");
      paths.add("javax/swing/text/rtf");
      paths.add("javax/swing/tree");
      paths.add("javax/swing/undo");
      paths.add("javax/tools");
      paths.add("javax/transaction");
      paths.add("javax/transaction/xa");
      paths.add("javax/vecmath");
      paths.add("javax/xml");
      paths.add("javax/xml/bind");
      paths.add("javax/xml/bind/annotation");
      paths.add("javax/xml/bind/annotation/adapters");
      paths.add("javax/xml/bind/attachment");
      paths.add("javax/xml/bind/helpers");
      paths.add("javax/xml/bind/util");
      paths.add("javax/xml/crypto");
      paths.add("javax/xml/crypto/dom");
      paths.add("javax/xml/crypto/dsig");
      paths.add("javax/xml/crypto/dsig/dom");
      paths.add("javax/xml/crypto/dsig/keyinfo");
      paths.add("javax/xml/crypto/dsig/spec");
      paths.add("javax/xml/datatype");
      paths.add("javax/xml/namespace");
      paths.add("javax/xml/parsers");
      paths.add("javax/xml/soap");
      paths.add("javax/xml/stream");
      paths.add("javax/xml/stream/events");
      paths.add("javax/xml/stream/util");
      paths.add("javax/xml/transform");
      paths.add("javax/xml/transform/dom");
      paths.add("javax/xml/transform/sax");
      paths.add("javax/xml/transform/stax");
      paths.add("javax/xml/transform/stream");
      paths.add("javax/xml/validation");
      paths.add("javax/xml/ws");
      paths.add("javax/xml/ws/handler");
      paths.add("javax/xml/ws/handler/soap");
      paths.add("javax/xml/ws/http");
      paths.add("javax/xml/ws/soap");
      paths.add("javax/xml/ws/spi");
      paths.add("javax/xml/ws/wsaddressing");
      paths.add("javax/xml/xpath");
      paths.add("junit/extensions");
      paths.add("junit/framework");
      paths.add("junit/runner");
      paths.add("junit/textui");
      paths.add("org/apache/commons/logging");
      paths.add("org/apache/commons/logging/impl");
      paths.add("org/apache/log4j");
      paths.add("org/apache/log4j/chainsaw");
      paths.add("org/apache/log4j/config");
      paths.add("org/apache/log4j/helpers");
      paths.add("org/apache/log4j/jdbc");
      paths.add("org/apache/log4j/jmx");
      paths.add("org/apache/log4j/lf5");
      paths.add("org/apache/log4j/lf5/util");
      paths.add("org/apache/log4j/lf5/viewer");
      paths.add("org/apache/log4j/lf5/viewer/categoryexplorer");
      paths.add("org/apache/log4j/lf5/viewer/configure");
      paths.add("org/apache/log4j/net");
      paths.add("org/apache/log4j/nt");
      paths.add("org/apache/log4j/or");
      paths.add("org/apache/log4j/or/jms");
      paths.add("org/apache/log4j/or/sax");
      paths.add("org/apache/log4j/spi");
      paths.add("org/apache/log4j/varia");
      paths.add("org/apache/log4j/xml");
      paths.add("org/apache/maven/artifact/repository/metadata");
      paths.add("org/apache/maven/artifact/repository/metadata/io/xpp3");
      paths.add("org/apache/maven/model");
      paths.add("org/apache/maven/model/building");
      paths.add("org/apache/maven/model/composition");
      paths.add("org/apache/maven/model/inheritance");
      paths.add("org/apache/maven/model/interpolation");
      paths.add("org/apache/maven/model/io");
      paths.add("org/apache/maven/model/io/xpp3");
      paths.add("org/apache/maven/model/locator");
      paths.add("org/apache/maven/model/management");
      paths.add("org/apache/maven/model/merge");
      paths.add("org/apache/maven/model/normalization");
      paths.add("org/apache/maven/model/path");
      paths.add("org/apache/maven/model/plugin");
      paths.add("org/apache/maven/model/profile");
      paths.add("org/apache/maven/model/profile/activation");
      paths.add("org/apache/maven/model/resolution");
      paths.add("org/apache/maven/model/superpom");
      paths.add("org/apache/maven/model/validation");
      paths.add("org/apache/maven/plugin/surefire/runorder");
      paths.add("org/apache/maven/repository/internal");
      paths.add("org/apache/maven/settings");
      paths.add("org/apache/maven/settings/building");
      paths.add("org/apache/maven/settings/crypto");
      paths.add("org/apache/maven/settings/io");
      paths.add("org/apache/maven/settings/io/xpp3");
      paths.add("org/apache/maven/settings/merge");
      paths.add("org/apache/maven/settings/validation");
      paths.add("org/apache/maven/surefire");
      paths.add("org/apache/maven/surefire/booter");
      paths.add("org/apache/maven/surefire/providerapi");
      paths.add("org/apache/maven/surefire/report");
      paths.add("org/apache/maven/surefire/shade/org/codehaus/plexus/util");
      paths.add("org/apache/maven/surefire/suite");
      paths.add("org/apache/maven/surefire/testset");
      paths.add("org/apache/maven/surefire/util");
      paths.add("org/apache/maven/surefire/util/internal");
      paths.add("org/apache/maven/wagon");
      paths.add("org/apache/maven/wagon/authentication");
      paths.add("org/apache/maven/wagon/authorization");
      paths.add("org/apache/maven/wagon/events");
      paths.add("org/apache/maven/wagon/observers");
      paths.add("org/apache/maven/wagon/providers/file");
      paths.add("org/apache/maven/wagon/providers/http");
      paths.add("org/apache/maven/wagon/proxy");
      paths.add("org/apache/maven/wagon/repository");
      paths.add("org/apache/maven/wagon/resource");
      paths.add("org/apache/maven/wagon/shared/http");
      paths.add("org/apache/xbean/propertyeditor");
      paths.add("org/apache/xbean/recipe");
      paths.add("org/codehaus/classworlds");
      paths.add("org/codehaus/plexus");
      paths.add("org/codehaus/plexus/classworlds");
      paths.add("org/codehaus/plexus/classworlds/launcher");
      paths.add("org/codehaus/plexus/classworlds/realm");
      paths.add("org/codehaus/plexus/classworlds/strategy");
      paths.add("org/codehaus/plexus/component");
      paths.add("org/codehaus/plexus/component/annotations");
      paths.add("org/codehaus/plexus/component/builder");
      paths.add("org/codehaus/plexus/component/collections");
      paths.add("org/codehaus/plexus/component/composition");
      paths.add("org/codehaus/plexus/component/configurator");
      paths.add("org/codehaus/plexus/component/configurator/converters");
      paths.add("org/codehaus/plexus/component/configurator/converters/basic");
      paths.add("org/codehaus/plexus/component/configurator/converters/composite");
      paths.add("org/codehaus/plexus/component/configurator/converters/lookup");
      paths.add("org/codehaus/plexus/component/configurator/converters/special");
      paths.add("org/codehaus/plexus/component/configurator/expression");
      paths.add("org/codehaus/plexus/component/discovery");
      paths.add("org/codehaus/plexus/component/factory");
      paths.add("org/codehaus/plexus/component/factory/java");
      paths.add("org/codehaus/plexus/component/manager");
      paths.add("org/codehaus/plexus/component/repository");
      paths.add("org/codehaus/plexus/component/repository/exception");
      paths.add("org/codehaus/plexus/component/repository/io");
      paths.add("org/codehaus/plexus/configuration");
      paths.add("org/codehaus/plexus/configuration/io");
      paths.add("org/codehaus/plexus/configuration/source");
      paths.add("org/codehaus/plexus/configuration/xml");
      paths.add("org/codehaus/plexus/container/initialization");
      paths.add("org/codehaus/plexus/context");
      paths.add("org/codehaus/plexus/interpolation");
      paths.add("org/codehaus/plexus/interpolation/multi");
      paths.add("org/codehaus/plexus/interpolation/object");
      paths.add("org/codehaus/plexus/interpolation/os");
      paths.add("org/codehaus/plexus/interpolation/reflection");
      paths.add("org/codehaus/plexus/interpolation/util");
      paths.add("org/codehaus/plexus/lifecycle");
      paths.add("org/codehaus/plexus/lifecycle/phase");
      paths.add("org/codehaus/plexus/logging");
      paths.add("org/codehaus/plexus/logging/console");
      paths.add("org/codehaus/plexus/personality/plexus/lifecycle/phase");
      paths.add("org/codehaus/plexus/util");
      paths.add("org/codehaus/plexus/util/cli");
      paths.add("org/codehaus/plexus/util/cli/shell");
      paths.add("org/codehaus/plexus/util/dag");
      paths.add("org/codehaus/plexus/util/introspection");
      paths.add("org/codehaus/plexus/util/io");
      paths.add("org/codehaus/plexus/util/reflection");
      paths.add("org/codehaus/plexus/util/xml");
      paths.add("org/codehaus/plexus/util/xml/pull");
      paths.add("org/eclipse/jetty/continuation");
      paths.add("org/eclipse/jetty/http");
      paths.add("org/eclipse/jetty/http/gzip");
      paths.add("org/eclipse/jetty/http/ssl");
      paths.add("org/eclipse/jetty/io");
      paths.add("org/eclipse/jetty/io/bio");
      paths.add("org/eclipse/jetty/io/nio");
      paths.add("org/eclipse/jetty/security");
      paths.add("org/eclipse/jetty/security/authentication");
      paths.add("org/eclipse/jetty/server");
      paths.add("org/eclipse/jetty/server/bio");
      paths.add("org/eclipse/jetty/server/handler");
      paths.add("org/eclipse/jetty/server/handler/jmx");
      paths.add("org/eclipse/jetty/server/jmx");
      paths.add("org/eclipse/jetty/server/nio");
      paths.add("org/eclipse/jetty/server/session");
      paths.add("org/eclipse/jetty/server/session/jmx");
      paths.add("org/eclipse/jetty/server/ssl");
      paths.add("org/eclipse/jetty/servlet");
      paths.add("org/eclipse/jetty/servlet/jmx");
      paths.add("org/eclipse/jetty/servlet/listener");
      paths.add("org/eclipse/jetty/util");
      paths.add("org/eclipse/jetty/util/ajax");
      paths.add("org/eclipse/jetty/util/component");
      paths.add("org/eclipse/jetty/util/log");
      paths.add("org/eclipse/jetty/util/resource");
      paths.add("org/eclipse/jetty/util/security");
      paths.add("org/eclipse/jetty/util/ssl");
      paths.add("org/eclipse/jetty/util/statistic");
      paths.add("org/eclipse/jetty/util/thread");
      paths.add("org/hamcrest");
      paths.add("org/hamcrest/core");
      paths.add("org/hamcrest/internal");
      paths.add("org/ietf/jgss");
      paths.add("org/jboss/arquillian/config/descriptor/api");
      paths.add("org/jboss/arquillian/config/descriptor/impl");
      paths.add("org/jboss/arquillian/config/impl/extension");
      paths.add("org/jboss/arquillian/container/impl");
      paths.add("org/jboss/arquillian/container/impl/client");
      paths.add("org/jboss/arquillian/container/impl/client/container");
      paths.add("org/jboss/arquillian/container/impl/client/deployment");
      paths.add("org/jboss/arquillian/container/impl/context");
      paths.add("org/jboss/arquillian/container/spi");
      paths.add("org/jboss/arquillian/container/spi/client/container");
      paths.add("org/jboss/arquillian/container/spi/client/deployment");
      paths.add("org/jboss/arquillian/container/spi/client/protocol");
      paths.add("org/jboss/arquillian/container/spi/client/protocol/metadata");
      paths.add("org/jboss/arquillian/container/spi/context");
      paths.add("org/jboss/arquillian/container/spi/context/annotation");
      paths.add("org/jboss/arquillian/container/spi/event");
      paths.add("org/jboss/arquillian/container/spi/event/container");
      paths.add("org/jboss/arquillian/container/test/api");
      paths.add("org/jboss/arquillian/container/test/impl");
      paths.add("org/jboss/arquillian/container/test/impl/client");
      paths.add("org/jboss/arquillian/container/test/impl/client/container");
      paths.add("org/jboss/arquillian/container/test/impl/client/container/command");
      paths.add("org/jboss/arquillian/container/test/impl/client/deployment");
      paths.add("org/jboss/arquillian/container/test/impl/client/deployment/command");
      paths.add("org/jboss/arquillian/container/test/impl/client/deployment/event");
      paths.add("org/jboss/arquillian/container/test/impl/client/deployment/tool");
      paths.add("org/jboss/arquillian/container/test/impl/client/protocol");
      paths.add("org/jboss/arquillian/container/test/impl/client/protocol/local");
      paths.add("org/jboss/arquillian/container/test/impl/deployment");
      paths.add("org/jboss/arquillian/container/test/impl/domain");
      paths.add("org/jboss/arquillian/container/test/impl/enricher/resource");
      paths.add("org/jboss/arquillian/container/test/impl/execution");
      paths.add("org/jboss/arquillian/container/test/impl/execution/event");
      paths.add("org/jboss/arquillian/container/test/spi");
      paths.add("org/jboss/arquillian/container/test/spi/client/deployment");
      paths.add("org/jboss/arquillian/container/test/spi/client/protocol");
      paths.add("org/jboss/arquillian/container/test/spi/command");
      paths.add("org/jboss/arquillian/container/test/spi/util");
      paths.add("org/jboss/arquillian/core/api");
      paths.add("org/jboss/arquillian/core/api/annotation");
      paths.add("org/jboss/arquillian/core/api/event");
      paths.add("org/jboss/arquillian/core/impl");
      paths.add("org/jboss/arquillian/core/impl/context");
      paths.add("org/jboss/arquillian/core/impl/loadable");
      paths.add("org/jboss/arquillian/core/spi");
      paths.add("org/jboss/arquillian/core/spi/context");
      paths.add("org/jboss/arquillian/core/spi/event");
      paths.add("org/jboss/arquillian/junit");
      paths.add("org/jboss/arquillian/junit/container");
      paths.add("org/jboss/arquillian/test/api");
      paths.add("org/jboss/arquillian/test/impl");
      paths.add("org/jboss/arquillian/test/impl/context");
      paths.add("org/jboss/arquillian/test/impl/enricher/resource");
      paths.add("org/jboss/arquillian/test/spi");
      paths.add("org/jboss/arquillian/test/spi/annotation");
      paths.add("org/jboss/arquillian/test/spi/context");
      paths.add("org/jboss/arquillian/test/spi/enricher/resource");
      paths.add("org/jboss/arquillian/test/spi/event/enrichment");
      paths.add("org/jboss/arquillian/test/spi/event/suite");
      paths.add("org/jboss/arquillian/testenricher/cdi");
      paths.add("org/jboss/arquillian/testenricher/cdi/client");
      paths.add("org/jboss/arquillian/testenricher/cdi/container");
      paths.add("org/jboss/classfilewriter");
      paths.add("org/jboss/classfilewriter/annotations");
      paths.add("org/jboss/classfilewriter/attributes");
      paths.add("org/jboss/classfilewriter/code");
      paths.add("org/jboss/classfilewriter/constpool");
      paths.add("org/jboss/classfilewriter/util");
      paths.add("org/jboss/forge");
      paths.add("org/jboss/forge/arquillian");
      paths.add("org/jboss/forge/arquillian/archive");
      paths.add("org/jboss/forge/arquillian/protocol");
      paths.add("org/jboss/forge/arquillian/runner");
      paths.add("org/jboss/forge/arquillian/util");
      paths.add("org/jboss/forge/container");
      paths.add("org/jboss/forge/container/event");
      paths.add("org/jboss/forge/container/exception");
      paths.add("org/jboss/forge/container/modules");
      paths.add("org/jboss/forge/container/modules/providers");
      paths.add("org/jboss/forge/container/services");
      paths.add("org/jboss/forge/container/util");
      paths.add("org/jboss/forge/parser/xml");
      paths.add("org/jboss/forge/parser/xml/query");
      paths.add("org/jboss/forge/parser/xml/util");
      paths.add("org/jboss/forge/test");
      paths.add("org/jboss/modules");
      paths.add("org/jboss/modules/filter");
      paths.add("org/jboss/modules/log");
      paths.add("org/jboss/modules/management");
      paths.add("org/jboss/modules/ref");
      paths.add("org/jboss/shrinkwrap/api");
      paths.add("org/jboss/shrinkwrap/api/asset");
      paths.add("org/jboss/shrinkwrap/api/classloader");
      paths.add("org/jboss/shrinkwrap/api/container");
      paths.add("org/jboss/shrinkwrap/api/exporter");
      paths.add("org/jboss/shrinkwrap/api/formatter");
      paths.add("org/jboss/shrinkwrap/api/importer");
      paths.add("org/jboss/shrinkwrap/api/serialization");
      paths.add("org/jboss/shrinkwrap/api/spec");
      paths.add("org/jboss/shrinkwrap/descriptor/api");
      paths.add("org/jboss/shrinkwrap/descriptor/api/spec/se/manifest");
      paths.add("org/jboss/shrinkwrap/descriptor/spi");
      paths.add("org/jboss/shrinkwrap/descriptor/spi/node");
      paths.add("org/jboss/shrinkwrap/descriptor/spi/node/dom");
      paths.add("org/jboss/shrinkwrap/impl/base");
      paths.add("org/jboss/shrinkwrap/impl/base/asset");
      paths.add("org/jboss/shrinkwrap/impl/base/container");
      paths.add("org/jboss/shrinkwrap/impl/base/exporter");
      paths.add("org/jboss/shrinkwrap/impl/base/exporter/tar");
      paths.add("org/jboss/shrinkwrap/impl/base/exporter/zip");
      paths.add("org/jboss/shrinkwrap/impl/base/filter");
      paths.add("org/jboss/shrinkwrap/impl/base/importer");
      paths.add("org/jboss/shrinkwrap/impl/base/importer/tar");
      paths.add("org/jboss/shrinkwrap/impl/base/importer/zip");
      paths.add("org/jboss/shrinkwrap/impl/base/io");
      paths.add("org/jboss/shrinkwrap/impl/base/io/tar");
      paths.add("org/jboss/shrinkwrap/impl/base/path");
      paths.add("org/jboss/shrinkwrap/impl/base/serialization");
      paths.add("org/jboss/shrinkwrap/impl/base/spec");
      paths.add("org/jboss/shrinkwrap/resolver/api");
      paths.add("org/jboss/shrinkwrap/resolver/api/maven");
      paths.add("org/jboss/shrinkwrap/resolver/api/maven/filter");
      paths.add("org/jboss/shrinkwrap/resolver/impl/maven");
      paths.add("org/jboss/shrinkwrap/spi");
      paths.add("org/jboss/weld");
      paths.add("org/jboss/weld/annotated");
      paths.add("org/jboss/weld/annotated/enhanced");
      paths.add("org/jboss/weld/annotated/enhanced/jlr");
      paths.add("org/jboss/weld/annotated/runtime");
      paths.add("org/jboss/weld/annotated/slim");
      paths.add("org/jboss/weld/annotated/slim/backed");
      paths.add("org/jboss/weld/annotated/slim/unbacked");
      paths.add("org/jboss/weld/bean");
      paths.add("org/jboss/weld/bean/attributes");
      paths.add("org/jboss/weld/bean/builtin");
      paths.add("org/jboss/weld/bean/builtin/ee");
      paths.add("org/jboss/weld/bean/interceptor");
      paths.add("org/jboss/weld/bean/proxy");
      paths.add("org/jboss/weld/bean/proxy/util");
      paths.add("org/jboss/weld/bootstrap");
      paths.add("org/jboss/weld/bootstrap/api");
      paths.add("org/jboss/weld/bootstrap/api/helpers");
      paths.add("org/jboss/weld/bootstrap/events");
      paths.add("org/jboss/weld/bootstrap/spi");
      paths.add("org/jboss/weld/bootstrap/spi/helpers");
      paths.add("org/jboss/weld/context");
      paths.add("org/jboss/weld/context/api");
      paths.add("org/jboss/weld/context/beanstore");
      paths.add("org/jboss/weld/context/beanstore/ejb");
      paths.add("org/jboss/weld/context/beanstore/http");
      paths.add("org/jboss/weld/context/bound");
      paths.add("org/jboss/weld/context/cache");
      paths.add("org/jboss/weld/context/conversation");
      paths.add("org/jboss/weld/context/ejb");
      paths.add("org/jboss/weld/context/http");
      paths.add("org/jboss/weld/context/unbound");
      paths.add("org/jboss/weld/ejb");
      paths.add("org/jboss/weld/ejb/api");
      paths.add("org/jboss/weld/ejb/spi");
      paths.add("org/jboss/weld/ejb/spi/helpers");
      paths.add("org/jboss/weld/el");
      paths.add("org/jboss/weld/enums");
      paths.add("org/jboss/weld/environment/se");
      paths.add("org/jboss/weld/environment/se/beans");
      paths.add("org/jboss/weld/environment/se/bindings");
      paths.add("org/jboss/weld/environment/se/contexts");
      paths.add("org/jboss/weld/environment/se/discovery");
      paths.add("org/jboss/weld/environment/se/discovery/url");
      paths.add("org/jboss/weld/environment/se/events");
      paths.add("org/jboss/weld/environment/se/threading");
      paths.add("org/jboss/weld/event");
      paths.add("org/jboss/weld/exceptions");
      paths.add("org/jboss/weld/executor");
      paths.add("org/jboss/weld/injection");
      paths.add("org/jboss/weld/injection/attributes");
      paths.add("org/jboss/weld/injection/producer");
      paths.add("org/jboss/weld/injection/producer/ejb");
      paths.add("org/jboss/weld/injection/spi");
      paths.add("org/jboss/weld/injection/spi/helpers");
      paths.add("org/jboss/weld/interceptor/builder");
      paths.add("org/jboss/weld/interceptor/proxy");
      paths.add("org/jboss/weld/interceptor/reader");
      paths.add("org/jboss/weld/interceptor/reader/cache");
      paths.add("org/jboss/weld/interceptor/spi/context");
      paths.add("org/jboss/weld/interceptor/spi/instance");
      paths.add("org/jboss/weld/interceptor/spi/metadata");
      paths.add("org/jboss/weld/interceptor/spi/model");
      paths.add("org/jboss/weld/interceptor/util");
      paths.add("org/jboss/weld/interceptor/util/proxy");
      paths.add("org/jboss/weld/jsf");
      paths.add("org/jboss/weld/literal");
      paths.add("org/jboss/weld/logging");
      paths.add("org/jboss/weld/logging/messages");
      paths.add("org/jboss/weld/manager");
      paths.add("org/jboss/weld/manager/api");
      paths.add("org/jboss/weld/metadata");
      paths.add("org/jboss/weld/metadata/cache");
      paths.add("org/jboss/weld/persistence");
      paths.add("org/jboss/weld/resolution");
      paths.add("org/jboss/weld/resources");
      paths.add("org/jboss/weld/resources/spi");
      paths.add("org/jboss/weld/resources/spi/helpers");
      paths.add("org/jboss/weld/security/spi");
      paths.add("org/jboss/weld/serialization");
      paths.add("org/jboss/weld/serialization/spi");
      paths.add("org/jboss/weld/serialization/spi/helpers");
      paths.add("org/jboss/weld/servlet");
      paths.add("org/jboss/weld/servlet/api");
      paths.add("org/jboss/weld/servlet/api/helpers");
      paths.add("org/jboss/weld/transaction/spi");
      paths.add("org/jboss/weld/util");
      paths.add("org/jboss/weld/util/annotated");
      paths.add("org/jboss/weld/util/bean");
      paths.add("org/jboss/weld/util/bytecode");
      paths.add("org/jboss/weld/util/collections");
      paths.add("org/jboss/weld/util/dom");
      paths.add("org/jboss/weld/util/el");
      paths.add("org/jboss/weld/util/reflection");
      paths.add("org/jboss/weld/util/reflection/instantiation");
      paths.add("org/jboss/weld/validation/spi");
      paths.add("org/jboss/weld/ws");
      paths.add("org/jboss/weld/xml");
      paths.add("org/jcp/xml/dsig/internal");
      paths.add("org/jcp/xml/dsig/internal/dom");
      paths.add("org/junit");
      paths.add("org/junit/experimental");
      paths.add("org/junit/experimental/categories");
      paths.add("org/junit/experimental/max");
      paths.add("org/junit/experimental/results");
      paths.add("org/junit/experimental/runners");
      paths.add("org/junit/experimental/theories");
      paths.add("org/junit/experimental/theories/internal");
      paths.add("org/junit/experimental/theories/suppliers");
      paths.add("org/junit/internal");
      paths.add("org/junit/internal/builders");
      paths.add("org/junit/internal/matchers");
      paths.add("org/junit/internal/requests");
      paths.add("org/junit/internal/runners");
      paths.add("org/junit/internal/runners/model");
      paths.add("org/junit/internal/runners/rules");
      paths.add("org/junit/internal/runners/statements");
      paths.add("org/junit/matchers");
      paths.add("org/junit/rules");
      paths.add("org/junit/runner");
      paths.add("org/junit/runner/manipulation");
      paths.add("org/junit/runner/notification");
      paths.add("org/junit/runners");
      paths.add("org/junit/runners/model");
      paths.add("org/omg/CORBA");
      paths.add("org/omg/CORBA/DynAnyPackage");
      paths.add("org/omg/CORBA/ORBPackage");
      paths.add("org/omg/CORBA/TypeCodePackage");
      paths.add("org/omg/CORBA/portable");
      paths.add("org/omg/CORBA_2_3");
      paths.add("org/omg/CORBA_2_3/portable");
      paths.add("org/omg/CosNaming");
      paths.add("org/omg/CosNaming/NamingContextExtPackage");
      paths.add("org/omg/CosNaming/NamingContextPackage");
      paths.add("org/omg/Dynamic");
      paths.add("org/omg/DynamicAny");
      paths.add("org/omg/DynamicAny/DynAnyFactoryPackage");
      paths.add("org/omg/DynamicAny/DynAnyPackage");
      paths.add("org/omg/IOP");
      paths.add("org/omg/IOP/CodecFactoryPackage");
      paths.add("org/omg/IOP/CodecPackage");
      paths.add("org/omg/Messaging");
      paths.add("org/omg/PortableInterceptor");
      paths.add("org/omg/PortableInterceptor/ORBInitInfoPackage");
      paths.add("org/omg/PortableServer");
      paths.add("org/omg/PortableServer/CurrentPackage");
      paths.add("org/omg/PortableServer/POAManagerPackage");
      paths.add("org/omg/PortableServer/POAPackage");
      paths.add("org/omg/PortableServer/ServantLocatorPackage");
      paths.add("org/omg/PortableServer/portable");
      paths.add("org/omg/SendingContext");
      paths.add("org/omg/stub/java/rmi");
      paths.add("org/omg/stub/javax/management/remote/rmi");
      paths.add("org/relaxng/datatype");
      paths.add("org/relaxng/datatype/helpers");
      paths.add("org/slf4j");
      paths.add("org/slf4j/agent");
      paths.add("org/slf4j/cal10n");
      paths.add("org/slf4j/ext");
      paths.add("org/slf4j/helpers");
      paths.add("org/slf4j/impl");
      paths.add("org/slf4j/instrumentation");
      paths.add("org/slf4j/profiler");
      paths.add("org/slf4j/spi");
      paths.add("org/sonatype/aether");
      paths.add("org/sonatype/aether/artifact");
      paths.add("org/sonatype/aether/collection");
      paths.add("org/sonatype/aether/connector/wagon");
      paths.add("org/sonatype/aether/deployment");
      paths.add("org/sonatype/aether/graph");
      paths.add("org/sonatype/aether/impl");
      paths.add("org/sonatype/aether/impl/internal");
      paths.add("org/sonatype/aether/installation");
      paths.add("org/sonatype/aether/metadata");
      paths.add("org/sonatype/aether/repository");
      paths.add("org/sonatype/aether/resolution");
      paths.add("org/sonatype/aether/spi/connector");
      paths.add("org/sonatype/aether/spi/io");
      paths.add("org/sonatype/aether/spi/locator");
      paths.add("org/sonatype/aether/spi/log");
      paths.add("org/sonatype/aether/transfer");
      paths.add("org/sonatype/aether/util");
      paths.add("org/sonatype/aether/util/artifact");
      paths.add("org/sonatype/aether/util/filter");
      paths.add("org/sonatype/aether/util/graph");
      paths.add("org/sonatype/aether/util/graph/manager");
      paths.add("org/sonatype/aether/util/graph/selector");
      paths.add("org/sonatype/aether/util/graph/transformer");
      paths.add("org/sonatype/aether/util/graph/traverser");
      paths.add("org/sonatype/aether/util/layout");
      paths.add("org/sonatype/aether/util/listener");
      paths.add("org/sonatype/aether/util/metadata");
      paths.add("org/sonatype/aether/util/repository");
      paths.add("org/sonatype/aether/util/version");
      paths.add("org/sonatype/aether/version");
      paths.add("org/sonatype/plexus/components/cipher");
      paths.add("org/sonatype/plexus/components/sec/dispatcher");
      paths.add("org/sonatype/plexus/components/sec/dispatcher/model");
      paths.add("org/sonatype/plexus/components/sec/dispatcher/model/io/xpp3");
      paths.add("org/w3c/dom");
      paths.add("org/w3c/dom/bootstrap");
      paths.add("org/w3c/dom/css");
      paths.add("org/w3c/dom/events");
      paths.add("org/w3c/dom/html");
      paths.add("org/w3c/dom/ls");
      paths.add("org/w3c/dom/ranges");
      paths.add("org/w3c/dom/stylesheets");
      paths.add("org/w3c/dom/traversal");
      paths.add("org/w3c/dom/views");
      paths.add("org/w3c/dom/xpath");
      paths.add("org/xml/sax");
      paths.add("org/xml/sax/ext");
      paths.add("org/xml/sax/helpers");
   }

   public static void dumpPaths()
   {
      ArrayList<String> out = new ArrayList<String>(paths);
      Collections.sort(out);
      for (String path : out)
      {
         System.out.println(path);
      }
   }

   private static Set<String> getPathsFrom(String root, File file)
   {
      Set<String> result = new HashSet<String>();
      String[] children = file.list();
      for (String name : children)
      {
         File child = new File(file, name);
         if (child.isDirectory())
         {
            result.addAll(getPathsFrom(root, child));
            String path = child.getAbsolutePath().substring(root.length() + 1);
            result.add(path);
         }
      }
      return result;
   }

   @Override
   protected ModuleIdentifier getId()
   {
      return ID;
   }

   @Override
   protected Set<String> getPaths()
   {
      return paths;
   }

}
