== JBoss Forge 2.0

The fastest way to build applications, share your software, and enjoy doing it.


What's new and noteworthy? 
--------------------------

- *Addons*: What were previously called "Plugins" in Forge 1, are now "Addons" in Forge 2. This decision was made to clear up confusing verbiage like, "Plugin X has N Plugins" (due to the org.jboss.forge.plugins.Plugin interface.)

- *Modular Container fully rewritten*:: The Forge runtime is now a fully functional Java module system based on JBoss Modules (The same engine behind JBoss AS 7+ and JBoss EAP). This means you may now pick-and-choose which addons are important for you.

- *Smaller, leaner, and faster*:: Forge 2 now sports a slimmer 7 megabyte download size, and starts up in under three seconds. (Compared to upwards of 10+ seconds for Forge 1)

- *Better IDE Integration*:: Forge 2 addons have been de-coupled from the command line, meaning you can create addons that run as wizards in the IDE, or commands in the shell - the same code works in both environments.

We are currently in the process of migrating Forge 1 to Forge 2, so expect to find some Forge 1 functionality missing in this first Alpha version.

== Download Forge 2:    
Forge 2 is packaged inside an Eclipse plugin and also as a standalone ZIP file. They are independent of each other.
It is worth mentioning that the Eclipse plugin does not support access to shell yet.

- Eclipse Update Site - http://download.jboss.org/jbosstools/builds/staging/jbosstools-forge_master/all/repo/
- Command line tools - https://repository.jboss.org/nexus/service/local/artifact/maven/redirect?r=releases&g=org.jboss.forge&a=forge-distribution&v=2.0.0.Alpha6&e=zip


=== Get Started with the Command line tools:

NOTE: The shell is not fully working at the moment, so we recommend you to use the Forge 2 Eclipse Plugin

- Download [JBoss Forge 2.0.0.Alpha6](https://repository.jboss.org/nexus/service/local/artifact/maven/redirect?r=releases&g=org.jboss.forge&a=forge-distribution&v=2.0.0.Alpha6&e=zip)
- Extract the ZIP to a folder and navigate to forge-2.0.0.Alpha6/bin folder

Forge is now ready to go. 

Install the required addons by running the following commands:

[source,cmd]
----
    forge --install groupId:artifactId,version
----

- Forge will install the required dependencies for each addon.

If you wish to install the prototype Forge 2 Shell called Aesh, be sure to run the following:

[source,cmd]
----
    forge --install shell
----

If you wish to remove any addon, you can use the following command:

[source,cmd]
----
    forge --remove groupId:artifactId,version
----

== Get Started with the Forge 2 Eclipse Plugin:

- Install the Forge 2 Eclipse Plugin from http://download.jboss.org/jbosstools/builds/staging/jbosstools-forge_master/all/repo/ and restart Eclipse

This plugin starts the Forge 2 Container and your installed addons, so you can use them directly in your workspace

- Press Ctrl + 5 to show the installed addons that you may interact with (these addons use the UI addon, hence providing a user interface - see Developing an UI Addon for more details).


=== The eclipse plugin already bundles the following addons  

- addon-manager
- convert
- dependencies
- environment
- facets
- javaee
- maven,projects
- resources
- ui
- ui-spi 

== Available addons

- link:addon-manager/README.asciidoc[Addon Manager]
- link:addons/README.asciidoc[Addons]
- link:configuration/README.asciidoc[Configuration]
- link:convert/README.asciidoc[Convert]
- link:dependencies/README.asciidoc[Dependencies]
- link:environment/README.asciidoc[Environment]
- link:facets/README.asciidoc[Facets]
- link:javaee/README.asciidoc[Java EE]
- link:maven/README.asciidoc[Maven]
- link:parser-java/README.asciidoc[Parser - Java]
- link:projects/README.asciidoc[Projects]
- link:resources/README.asciidoc[Resources]
- link:scaffold/README.asciidoc[Scaffold]
- link:shell/README.asciidoc[Shell]
- link:ui/README.asciidoc[User Interface (UI)]


== Developing an Addon

Forge addons are simple Maven projects with a special classifier "forge-addon". This classifier is used while installing an addon so Forge can calculate its dependencies automatically releasing you from the http://robjsoftware.org/2007/07/13/classloader-hell/[Classloader hell]

=== Create a Maven project

Forge Addons must be packaged with a 'forge-addon' classifier. Add this plugin configuration to your pom.xml:

[source,xml]
----
    <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
               <execution>
                  <id>create-forge-addon</id>
                  <phase>package</phase>
                  <goals>
                     <goal>jar</goal>
                  </goals>
                  <inherited>false</inherited>
                  <configuration>
                     <classifier>forge-addon</classifier>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
    </build>
----

=== Use the Forge CDI Container

In order to use CDI in your addon, you need to reference the Furnace CDI container addon in your _pom.xml_ file:

[source,xml]
----
<dependency>
   <groupId>org.jboss.forge.furnace</groupId>
   <artifactId>container-cdi</artifactId>
   <classifier>forge-addon</classifier>
   <scope>provided</scope>
</dependency>
----

Once this is done, to expose services in your Addon for injection and service lookups in other addons, your types must be annotated with **@Exported**: 

[source,java]
----
    @Exported
    public class ServiceImpl
    {
       public ServiceResult performTask() {
            // Do stuff...
       }
    }
----

However, best practices favor placing the **@Exported** annotation on a service interface, otherwise consumers will be required to request your specific service implementation. For example:

[source,java]
----
    @Exported
    public interface ServiceType
    {
       public ServiceResult performTask();
    }
----

Then simply implement the service interface, and the **@Exported** annotation will be inherited automatically:

[source,java]
----
    public class ServiceImpl implements ServiceType
    {
       public ServiceResult performTask() {
            // Do stuff...
       }
    }
----

=== Install your project in the local maven repository:

[source,cmd]
----
    mvn clean install
----

Run

[source,cmd]
----
    ./forge --install yourgroupId:artifactId,version
----

NOTE: This coordinate is NOT the same as maven's. You MUST use a comma (,) between the artifactId and the version**

=== Install your Addon
 
Depending on the Forge environment in which you are running, installation steps will differ. 

For Eclipse:: Open the Forge quick-assist menu, select either "Build and install an Addon" or "Install an addon" to build and install your project, or install a pre-built maven artifact.

For the Shell:: Make sure that you have run a _mvn install_ prior to executing _forge --install artifactId:groupId:version_ on the native system terminal command line.
